div.container
  markdown:
    # API文档
    ----
    ### 1. 创建oauth应用
    访问`http://localhost:3000/oauth/applications`, 点击 New Application按钮,
    Name随意填，Redirect uri填写urn:ietf:wg:oauth:2.0:oob，然后submit.
    记住Application Id和Secret.

    ### 2. 获取手机校验码
    `GET /api/v1/users/validation_code?phone=手机号&type=校验码类型`

    * phone即为要获取校验码的手机号。
    * type为获取校验码的类型，1为获取注册用的校验码，2为获取登录用的校验码，3为获取重置密码的校验码,
      不同的type值会有不同的短信内容, 目前仅使用1.
    * 如果调用成功，返回`{"result":1}`, 如果调用失败，返回`{"result":0,"error":"错误原因"}`
    * 调用实例：   `curl --request GET http://localhost:3000/api/v1/users/validation_code?phone=13812345678&type=1`
    * 服务器向云信发送请求的时间间隔为1分钟，1分钟内重复发送校验码请求，将失败.
    * 校验码的有效期为10分钟，超过10分钟注册，将失败。

    ### 3. 注册用户
    `POST /api/v1/users/register`

    * POST数据部分包括2个参数，phone：手机号，validation_code：手机上收到的短信校验码
    * 如果调用成功，返回`{"result":1,oauth_login_code:"oauth登陆码"}`,如果调用失败，
      返回`{"result":0,"error":"错误原因"}`.
      这个oauth登陆码需要保存起来，为了下一步oauth登录用。
    * 调用实例：   `curl -H 'Content-Type:application/json' --request POST -d '{"phone":"13812345678","validation_code":"904283"}' http://localhost:3000/api/v1/users/register.`

    ### 4. oauth登录
    使用第1步获取的Application Id和Secret，用手机号作为oauth密码登录方式的用户名，
    用第3步获取的oauth\_login\_code作为oauth密码登录方式的密码, 进行oauth登录，具体用法可参见相关的第三方库使用说明.
    如果oauth登录成功，则返回token，refresh\_token，expires\_in，expires_in为超时时间，服务器端设置为1天.
    如果oauth登录失败，返回{"error":"错误原因"}.

    另外也可以使用用户名，email，手机号作为oauth密码登录方式的用户名，使用账户的密码作为oauth密码登录方式的密码。

    ### 5. 使用oauth的token访问资源
    使用第4步获取的token，来访问服务器的资源，具体用法可参见相关的第三方库使用说明.
    如果token超时，则使用refresh_token重新获取新的token进行资源访问。

    ### 6. 设置用户名和密码
    `PUT /api/v1/users/update`

    * 数据部分包括2个参数，name: 用户名, password: 密码, password_confirmation: 确认密码
    * 如果调用成功，返回`{"result":1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`.
    * 调用实例: `curl -H 'Content-Type:application/json' --request PUT -d '{"name":"gyb","password":"12345678","password_confirmation":"12345678"}' http://localhost:3000/api/v1/users/update.`

    ### 7. 用户登录 
    `POST /api/v1/users/login`

    * 先使用type=2，获取手机登录校验码
    * POST数据部分包括2个参数，phone：手机号，validation_code：手机上收到的短信校验码
    * 如果调用成功，返回`{"result":1,oauth_login_code:"oauth登陆码"}`,如果调用失败，
      返回`{"result":0,"error":"错误原因"}`.
      这个oauth登陆码需要保存起来，为了下一步oauth登录用。
    * 调用实例：   `curl -H 'Content-Type:application/json' --request POST -d '{"phone":"13812345678","validation_code":"904283"}' http://localhost:3000/api/v1/users/login.`

    ### 8. 重置用户名和密码
    `PUT /api/v1/users/reset`

    * 先使用type=3，获取手机重置校验码
    * 数据部分包括4个参数，phone：手机号，validation\_code：手机上收到的短信校验码
                           password: 密码, password\_confirmation: 确认密码
    * 如果调用成功，返回`{"result":1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`.
    * 调用实例: `curl -H 'Content-Type:application/json' --request PUT -d '{"phone":"13812345678","validation_code":"904483","password":"12345678","password_confirmation":"12345678"}' http://localhost:3000/api/v1/users/reset.`

    ### 9. 获取App的最新版本
    `GET /api/v1/app_versions/newest`
    
    * 数据部分包括1个参数，name: App名称
    * 如果调用成功，返回`{"result":1,"version":"1.0.1"}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`.
    * 调用实例: `curl 'http://localhost:3000/api/v1/app_versions/newest?name=MotorbikeApp'`

    ### 10. 获取指定App版本的app url
    `GET /api/v1/app_versions/url`

    * 数据部分包括2个参数，name: App名称, version: 版本号
    * 如果调用成功，返回`{"result":1,"url":"app的完整url"}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`.
    * 调用实例: `curl 'http://localhost:3000/api/v1/app_versions/url?name=MotorbikeApp&version=1.1.0'`

    ### 11. 获取指定App版本的变更内容
    `GET /api/v1/app_versions/changelog`

    * 数据部分包括2个参数，name: App名称, version: 版本号
    * 如果调用成功，返回`{"result":1,"changelog":"app的变更内容"}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`.
      这个变更内容在网站端可以用markdown的语法输入，返回的是html内容，app端可以放到webview中显示。
    * 调用实例: `curl 'http://localhost:3000/api/v1/app_versions/changelog?name=MotorbikeApp&version=1.1.0'`

    ### 12. 获取登录用户的出行计划列表
    `GET /api/v1/travel_plans`

    * 如果调用成功，返回

        `{ "result:1,
          "travel_plans":
           [{"id":"5667e1dde54396160e00000b",
             "content":"11123asdfasfasdfasf",
             "passing_locations":[[115, 12.0],[34,56]],
             "destination_location":[118.28,55.22],
             "status":1,
             "start_off_time":"2015-12-12 03:00:00"}]`

    * 其中travel_plans为出行计划列表，类型为一个数组，数组中每一个元素为一条出行计划记录.
    * id为记录的id.
    * content为出行计划内容.
    * passing_locations为出行计划途径地的经纬度，类型为一个数组，每个元素为经纬度数组.
    * destination_location为目的地经纬度数组.
    * status为该出行计划状态，类型为整型.
    * start_off\_time为出发时间

    * 如果调用失败, 返回`{"result":0,"error":"错误原因"}`.

    * 调用实例: `curl --request GET  http://localhost:3000/api/v1/travel_plans`

    ### 13. 为当前登录用户创建一条出行计划
    `POST /api/v1/travel_plans`

    * 数据部分包括5个参数，
      * content: 出行计划内容,
      * passing\_locations: 出行计划途径地的经纬度数组,
      * destination\_location: 目的地经纬度,
      * status: 出行计划状态,
      * start_off\_time: 出发时间

    * 如果调用成功，返回 `{"result": 1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`

    * 调用实例: `curl -H 'Content-Type:application/json'
                --request POST
                -d '{"content":"hello","passing_locations":[[12,3],[23,5]],
                    "destination_location":[23.35,18.2],status:1,
                    "start_off_time":"2015-12-30 08:30:00"}'
                http://localhost:3000/api/v1/travel_plans`

    ### 14. 为当前登录用户更新一条出行计划
    `PUT /api/v1/travel_plans/:id`

    * id为已获取的出行计划列表中相应的一条出行计划记录中的id字段内容

    * 数据部分包括5个参数，
      * content: 出行计划内容,
      * passing\_locations: 出行计划途径地的经纬度数组,
      * destination\_location: 目的地经纬度,
      * status: 出行计划状态,
      * start_off\_time: 出发时间,

      这几个字段都是可选的，可以只填其中一个.

    * 如果调用成功，返回 `{"result": 1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`

    * 调用实例: `curl -H 'Content-Type:application/json'
                --request PUT
                -d '{"content":"hello", status:2}'
                http://localhost:3000/api/v1/travel_plans/5667e1dde54396160e00000b`

    ### 15. 为当前登录用户删除一条出行计划
    `DELETE /api/v1/travel_plans/:id`

    * id为已获取的出行计划列表中相应的一条出行计划记录中的id字段内容
    * 如果调用成功，返回 `{"result": 1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`

    * 调用实例: `curl --request DELETE http://localhost:3000/api/v1/travel_plans/5667e1dde54396160e00000b`

    ### 16. 为当前登录用户获取一条指定id的出行计划
    `GET /api/v1/travel_plans/:id`

    * id为已获取的出行计划列表中相应的一条出行计划记录中的id字段内容
    * 如果调用成功，返回

        `{ "result:1,
          "travel_plan":
           {"id":"5667e1dde54396160e00000b",
             "content":"11123asdfasfasdfasf",
             "passing_locations":[[115, 12.0],[34,56]],
             "destination_location":[118.28,55.22],
             "status":1,
             "start_off_time":"2015-12-12 03:00:00"}}`

    * 如果调用失败, 返回`{"result":0,"error":"错误原因"}`

    * 调用实例: `curl --request GET http://localhost:3000/api/v1/travel_plans/5667e1dde54396160e00000b`

    ### 17. 获取登录用户的车辆信息
    `GET /api/v1/bikes`

    * 如果调用成功，返回

        `{ "result:1,
          "bikes":
           [{"id":"5673a4a8e5439637e1000000",
             "name":"rensheng1234",
             "module_id":"123123123",
             "longitude":112.5,
             "latitude":318.5,
             "battery":12.5,
             "travel_mileage":0.0,
             "diag_info":{"sdf":"234"}}]}`

    * 其中bikes为该用户所有的车辆信息数组.

    * 如果调用失败, 返回`{"result":0,"error":"错误原因"}`.

    * 调用实例: `curl --request GET  http://localhost:3000/api/v1/bikes`

    ### 18. 为当前登录用户添加一个电动车信息
    `POST /api/v1/bikes`

    * 数据部分包括2个参数，
      * module_id: 电动车的模块id, 必须填的.
      * name: 电动车的名称，可选的.

    * 如果调用成功，返回 `{"result": 1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`

    * 调用实例: `curl -H 'Content-Type:application/json'
                --request POST
                -d '{"module_id":"2423424"
                    "name":"moto1123"}'
                http://localhost:3000/api/v1/bikes`

    ### 19. 为当前登录用户更新一个电动车信息
    `PUT /api/v1/bikes/:id`

    * id为已获取的用户的车辆信息中相应的一条记录中的id字段内容

    * 数据部分包括7个参数，
      * module_id: 电动车的模块id, 可选.
      * name: 电动车的名称，可选.
      * longitude: 经度，可选.
      * latitude: 纬度，可选.
      * battery: 电量，可选.
      * travel_mileage: 行驶里程，可选.
      * diag_info: 诊断信息，可选.

    * 如果调用成功，返回 `{"result": 1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`

    * 调用实例: `curl -H 'Content-Type:application/json'
                --request PUT
                -d '{"longitude":134.5, "latitude":5, "diag_info":{"sdf":"234"}}'
                http://localhost:3000/api/v1/bikes/5673a4a8e5439637e1000000`

    ### 20. 为当前登录用户删除一个电动车信息
    `DELETE /api/v1/bikes/:id`

    * id为已获取的用户的车辆信息中相应的一条记录中的id字段内容.
    * 如果调用成功，返回 `{"result": 1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`

    * 调用实例: `curl --request DELETE http://localhost:3000/api/v1/bikes/5673a4a8e5439637e1000000`

    ### 21. 为当前登录用户获取一条指定bike id的电动车信息
    `GET /api/v1/bikes/:id`

    * id为已获取的用户的车辆信息中相应的一条记录中的id字段内容.
    * 如果调用成功，返回

        `{ "result:1,
          "bike":
           {"id":"5673a4a8e5439637e1000000",
             "name":"rensheng1234",
             "module_id":"123123123",
             "longitude":112.5,
             "latitude":318.5,
             "battery":12.5,
             "travel_mileage":0.0,
             "diag_info":{"sdf":"234"}}`

    * 如果调用失败, 返回`{"result":0,"error":"错误原因"}`
    * 调用实例: `curl --request GET http://localhost:3000/api/v1/bikes/5673a4a8e5439637e1000000`

    ### 22. 为当前登录用户获取一指定的电动车行驶位置信息
    `GET /api/v1/bikes/:id/locations`

    * id为已获取的用户的车辆信息中相应的一条记录中的id字段内容.
    * 如果调用成功，返回

        `{ "result:1,
          "locations":
            [{"longitude":12.5,"latitude":118.5},
             {"longitude":112.5,"latitude":318.5}}`

        其中locations为该电动车的行驶位置数组.

    * 如果调用失败, 返回`{"result":0,"error":"错误原因"}`
    * 调用实例: `curl --request GET http://localhost:3000/api/v1/bikes/5673a4a8e5439637e1000000/locations`

    ### 23. 为当前登录用户上传一个指定模块id的电动车信息
    `PUT /api/v1/bikes/upload/:module_id`

    * module_id为电动车的模块id

    * 数据部分包括6个参数，
      * name: 电动车的名称，可选.
      * longitude: 经度，可选.
      * latitude: 纬度，可选.
      * battery: 电量，可选.
      * travel_mileage: 行驶里程，可选.
      * diag_info: 诊断信息，可选.

    * 如果调用成功，返回 `{"result": 1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`

    * 调用实例: `curl -H 'Content-Type:application/json'
                --request PUT
                -d '{"longitude":134.5, "latitude":5, "diag_info":{"sdf":"234"}}'
                http://localhost:3000/api/v1/bikes/upload/123123123`

    ### 24. 为当前登录用户上传文件
    `POST /api/v1/medias`

    body的编码部分使用multipart/form-data
    

    * 数据部分包括2个参数，
      * type: 上传的文件类型, 1: 图片, 2: 视频, 3: 音频
      * media: 上传的文件内容。

    * 如果调用成功，返回 `{"result": 1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`

    * 调用实例: `curl -X PUT http://localhost:3000/api/v1/medias/upload 
                      -F 'type=1' 
                      -F 'access_token=a69b7ce2bb7b7b1ac7fcefda2fcf9abddd86f203c0d38ba94c2e9f1e2486b0e3' 
                      -F "media=@/vagrant/aa.jpg;type=image/jpeg"`

    ### 25. 获取登录用户的已上传的文件列表
    `GET /api/v1/medias`

    * 数据部分包括1个参数
      * type: 文件类型,  1: 图片, 2: 视频, 3: 音频
      * 如果指定type参数, 将返回指定type的文件列表.

    * 如果调用成功，返回

        `{"medias":[{"id":"568cccc863623925ad000000","type":1,"url":"http://localhost:3000/uploads/media/media/568cccc863623925ad000000/a1.jpg"},{"id":"568ccccb63623925ad000001","type":1,"url":"http://localhost:3000/uploads/media/media/568ccccb63623925ad000001/a1.jpg"}],"result":1}`

    * 其中medias为该用户所上传的文件信息数组.

    * 如果调用失败, 返回`{"result":0,"error":"错误原因"}`.

    ### 26. 为当前登录用户删除一个已上传的文件
    `DELETE /api/v1/medias/:id`

    * id为已获取的用户的上传文件信息中相应的一条记录中的id字段内容.
    * 如果调用成功，返回 `{"result": 1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`

    ### 27. 为当前登录用户删除所有已上传的文件
    `DELETE /api/v1/medias`

    * 数据部分包括1个参数
      * type: 文件类型,  1: 图片, 2: 视频, 3: 音频
      * 如果指定type参数, 将删除定type的文件.
    * 如果调用成功，返回 `{"result": 1}`, 如果调用失败, 返回`{"result":0,"error":"错误原因"}`

